import 'dart:async';
import 'package:dioc/dioc.dart';

abstract class Service {
  Future<String> getContent(String id);
}

class MockService implements Service {
  @override
  Future<String> getContent(String id) async => "TEST";
}


class OtherService {

  final Service dependency;

  OtherService(this.dependency);
}


class WebService implements Service {
  @override
  Future<String> getContent(String id) async => "TEST";
}


@Provide(OtherService)
abstract class AppBootsrapper extends Bootsrapper {
  @Provide.implemented(Service, MockService)
  Container development();

  @Provide.implemented(Service, WebService)
  Container production();
}

/// Could be generated by <dioc_generator>

class _AppBootsrapper implements AppBootsrapper {
  Container base() {
    final container = new Container();
    container.register(OtherService, (c) => new OtherService(c.singleton(Service)));
    return container;
  }

  Container development() {
    final container = base();
    container.register(Service, (c) => new MockService());
    return container;
  }

  Container production() {
    final container = base();
    container.register(Service, (c) => new WebService());
    return container;
  }
}

class AppBootsrapperBuilder  {
  static final AppBootsrapper instance = build();
  static AppBootsrapper build() => new _AppBootsrapper();
}

// Main

main() {

}
